buildscript {
    ext.kotlin_version = "1.2.31"

    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
    }
}

description 'Kotlin experimental immutable collection interfaces and implementations'

allprojects {
    apply plugin: 'kotlin'
    group = 'org.jetbrains.kotlinx'
    version = project.properties["deployVersion"] ?: '0.1-SNAPSHOT'

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
        testCompile "junit:junit:4.12"
    }
}
apply plugin: 'com.github.johnrengelman.shadow'

configurations {
    shadowed
    compile.extendsFrom(shadow)
    compile.extendsFrom(shadowed)
}

dependencies {
    shadow "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    shadowed project(':pcollections')
}

project('tests') {
    dependencies {
        compile project(path: ':kotlinx-collections-immutable', configuration: 'shadow')
    }
}

compileKotlin {
    kotlinOptions.jdkHome = JDK_16
}



apply plugin: 'signing'
//apply plugin: 'maven-publish'
apply plugin: 'maven'




shadowJar {
    classifier = null
    configurations = [project.configurations.shadowed]
    relocate 'org.pcollections', 'kotlinx.collections.immutable.internal.org.pcollections'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier "sources"
}

task emptyJavadoc(type: Javadoc) {
    source = sourceSets.main.java
    failOnError = false
}

task javadocJar(type: Jar, dependsOn: emptyJavadoc) {
    classifier = 'javadoc'
    from emptyJavadoc.destinationDir
}

artifacts {
    archives shadowJar
    archives sourcesJar
    archives javadocJar
}

signing {
    required { (project.properties["signingRequired"] ?: false) }
    sign configurations.archives
}

signArchives {
    enabled signing.required
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            repository(url:  project.properties["deployRepoUrl"] ?: "file://${rootProject.buildDir}/repo") {
                authentication(
                        userName: project.properties["deployRepoUsername"],
                        password: project.properties["deployRepoPassword"]
                )
            }
            pom.project {
                name "${project.group}:${project.name}"
                packaging 'jar'
                // optionally artifactId can be defined here
                description project.description
                url 'https://github.com/Kotlin/kotlinx.collections.immutable'
                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                scm {
                    url 'https://github.com/Kotlin/kotlinx.collections.immutable'
                    connection 'scm:git:https://github.com/Kotlin/kotlinx.collections.immutable'
                    developerConnection 'scm:git:https://github.com/Kotlin/kotlinx.collections.immutable'
                }
                developers {
                    developer {
                        name 'Ilya Gorbunov'
                        email 'ilya.gorbunov@jetbrains.com'
                        organization = 'JetBrains'
                        organizationUrl 'http://www.jetbrains.com'
                    }
                }
            }
        }
    }
}

task publish(dependsOn: uploadArchives)
/*

// extract signature file and give them proper name
def getSignatureFiles = {
    def allFiles = project.tasks.signArchives.signatureFiles.collect { it }
    def signedSources = allFiles.find { it.name.contains('-sources') }
    def signedJavadoc = allFiles.find { it.name.contains('-javadoc') }
    def signedJar = (allFiles - [signedSources, signedJavadoc])[0]
    return [
            [archive: signedSources, classifier: 'sources', extension: 'pom.asc'],
            [archive: signedJavadoc, classifier: 'javadoc', extension: 'pom.asc'],
            [archive: signedJar,     classifier: null,      extension: 'pom.asc']
    ]
}

publishing {
    publications {
        mainPublication(MavenPublication) {
            from components.shadow
            artifact sourcesJar
            artifact javadocJar

            pom.withXml {
                Node node = asNode()

                node.dependencies.'*'.each { it.scope*.value = 'compile'}

                node.children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST
                    packaging 'jar'
                    name "${project.group}:${project.name}"
                    description project.description
                    url 'https://github.com/Kotlin/kotlinx.collections.immutable'
                    licenses {
                        license {
                            name 'The Apache License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    scm {
                        url 'https://github.com/Kotlin/kotlinx.collections.immutable'
                        connection 'scm:git:https://github.com/Kotlin/kotlinx.collections.immutable'
                        developerConnection 'scm:git:https://github.com/Kotlin/kotlinx.collections.immutable'
                    }
                    developers {
                        developer {
                            name 'Ilya Gorbunov'
                            email 'ilya.gorbunov@jetbrains.com'
                            organization 'JetBrains'
                            organizationUrl 'http://www.jetbrains.com'
                        }
                    }
                }
            }

            if (signing.required) {
                // Sign the pom.xml.
                def pomFile = project.file("$buildDir/publications/pom-for-signing.xml")
                pom.withXml {
                    writeTo(pomFile)
                    def pomAscFile = signing.sign(pomFile).signatureFiles[0]
//                    artifact(pomAscFile) {
//                        classifier = null
//                        extension = 'pom.asc'
//                    }
                    pomFile.delete()
                }

                // Sign the artifacts.
                getSignatureFiles().each { signature ->
                    artifact (signature.archive) {
                        classifier = signature.classifier
                        extension  = signature.extension
                    }
                }
            }
        }
    }
}
*/
