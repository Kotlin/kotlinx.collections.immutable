plugins {
    id 'org.jetbrains.kotlin.jvm'
}

dependencies {
    implementation libs.kotlin.stdlib
    implementation libs.jmh.core
    
    runtimeOnly project(path: ':benchmarks', configuration: 'benchmarksJar')
    runtimeOnly project(path: ':kotlinx-collections-immutable')
}

sourceSets.main.kotlin.srcDirs "src"

// map
task benchmarkHashMap(type: JavaExec, group: "Benchmark") {
    main = 'runners.HashMapRunnerKt'
}

task benchmarkHashMapBuilder(type: JavaExec, group: "Benchmark") {
    main = 'runners.HashMapBuilderRunnerKt'
}

task benchmarkOrderedMap(type: JavaExec, group: "Benchmark") {
    main = 'runners.OrderedMapRunnerKt'
}

task benchmarkOrderedMapBuilder(type: JavaExec, group: "Benchmark") {
    main = 'runners.OrderedMapBuilderRunnerKt'
}

task benchmarkAllMaps(group: "Benchmark") {
    dependsOn benchmarkHashMap
    dependsOn benchmarkHashMapBuilder
    dependsOn benchmarkOrderedMap
    dependsOn benchmarkOrderedMapBuilder
}

// set
task benchmarkHashSet(type: JavaExec, group: "Benchmark") {
    main = 'runners.HashSetRunnerKt'
}

task benchmarkHashSetBuilder(type: JavaExec, group: "Benchmark") {
    main = 'runners.HashSetBuilderRunnerKt'
}

task benchmarkOrderedSet(type: JavaExec, group: "Benchmark") {
    main = 'runners.OrderedSetRunnerKt'
}

task benchmarkOrderedSetBuilder(type: JavaExec, group: "Benchmark") {
    main = 'runners.OrderedSetBuilderRunnerKt'
}

task benchmarkAllSets(group: "Benchmark") {
    dependsOn benchmarkHashSet
    dependsOn benchmarkHashSetBuilder
    dependsOn benchmarkOrderedSet
    dependsOn benchmarkOrderedSetBuilder
}

// list
task benchmarkList(type: JavaExec, group: "Benchmark") {
    main = 'runners.ListRunnerKt'
}

task benchmarkListBuilder(type: JavaExec, group: "Benchmark") {
    main = 'runners.ListBuilderRunnerKt'
}

task benchmarkAllLists(group: "Benchmark") {
    dependsOn benchmarkList
    dependsOn benchmarkListBuilder
}

// all
task benchmarkAll(group: "Benchmark") {
    dependsOn benchmarkAllMaps
    dependsOn benchmarkAllSets
    dependsOn benchmarkAllLists
}


// configure runner tasks

def benchmarkParams = [
        'remote',
        'forks',
        'measurementIterations', 
        'measurementTime', 
        'warmupIterations', 
        'warmupTime',
//      'exclude',
//      'include',
        'size',
        'hashCodeType',
        'immutablePercentage'
]

tasks.withType(JavaExec) {
    if (group == "Benchmark") {
        classpath = sourceSets.main.runtimeClasspath
        
        benchmarkParams.forEach { param ->
            if (project.hasProperty(param)) {
                systemProperty(param, project.property(param))
            }
        }
    }
}