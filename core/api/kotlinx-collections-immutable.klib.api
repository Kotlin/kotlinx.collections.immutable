// Klib ABI Dump
// Targets: [androidNativeArm32, androidNativeArm64, androidNativeX64, androidNativeX86, iosArm64, iosSimulatorArm64, iosX64, js, linuxArm64, linuxX64, macosArm64, macosX64, mingwX64, tvosArm64, tvosSimulatorArm64, tvosX64, wasmJs, wasmWasi, watchosArm32, watchosArm64, watchosDeviceArm64, watchosSimulatorArm64, watchosX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <org.jetbrains.kotlinx:kotlinx-collections-immutable>
abstract interface <#A: kotlin/Any?, #B: out kotlin/Any?> kotlinx.collections.immutable/ImmutableMap : kotlin.collections/Map<#A, #B> { // kotlinx.collections.immutable/ImmutableMap|null[0]
    abstract val entries // kotlinx.collections.immutable/ImmutableMap.entries|{}entries[0]
        abstract fun <get-entries>(): kotlinx.collections.immutable/ImmutableSet<kotlin.collections/Map.Entry<#A, #B>> // kotlinx.collections.immutable/ImmutableMap.entries.<get-entries>|<get-entries>(){}[0]
    abstract val keys // kotlinx.collections.immutable/ImmutableMap.keys|{}keys[0]
        abstract fun <get-keys>(): kotlinx.collections.immutable/ImmutableSet<#A> // kotlinx.collections.immutable/ImmutableMap.keys.<get-keys>|<get-keys>(){}[0]
    abstract val values // kotlinx.collections.immutable/ImmutableMap.values|{}values[0]
        abstract fun <get-values>(): kotlinx.collections.immutable/ImmutableCollection<#B> // kotlinx.collections.immutable/ImmutableMap.values.<get-values>|<get-values>(){}[0]
}

abstract interface <#A: kotlin/Any?, #B: out kotlin/Any?> kotlinx.collections.immutable/PersistentMap : kotlinx.collections.immutable/ImmutableMap<#A, #B> { // kotlinx.collections.immutable/PersistentMap|null[0]
    abstract fun builder(): kotlinx.collections.immutable/PersistentMap.Builder<#A, #B> // kotlinx.collections.immutable/PersistentMap.builder|builder(){}[0]
    abstract fun clear(): kotlinx.collections.immutable/PersistentMap<#A, #B> // kotlinx.collections.immutable/PersistentMap.clear|clear(){}[0]
    abstract fun put(#A, #B): kotlinx.collections.immutable/PersistentMap<#A, #B> // kotlinx.collections.immutable/PersistentMap.put|put(1:0;1:1){}[0]
    abstract fun putAll(kotlin.collections/Map<out #A, #B>): kotlinx.collections.immutable/PersistentMap<#A, #B> // kotlinx.collections.immutable/PersistentMap.putAll|putAll(kotlin.collections.Map<out|1:0,1:1>){}[0]
    abstract fun remove(#A): kotlinx.collections.immutable/PersistentMap<#A, #B> // kotlinx.collections.immutable/PersistentMap.remove|remove(1:0){}[0]
    abstract fun remove(#A, #B): kotlinx.collections.immutable/PersistentMap<#A, #B> // kotlinx.collections.immutable/PersistentMap.remove|remove(1:0;1:1){}[0]

    abstract interface <#A1: kotlin/Any?, #B1: kotlin/Any?> Builder : kotlin.collections/MutableMap<#A1, #B1> { // kotlinx.collections.immutable/PersistentMap.Builder|null[0]
        abstract fun build(): kotlinx.collections.immutable/PersistentMap<#A1, #B1> // kotlinx.collections.immutable/PersistentMap.Builder.build|build(){}[0]
    }
}

abstract interface <#A: out kotlin/Any?> kotlinx.collections.immutable/ImmutableCollection : kotlin.collections/Collection<#A> // kotlinx.collections.immutable/ImmutableCollection|null[0]

abstract interface <#A: out kotlin/Any?> kotlinx.collections.immutable/ImmutableList : kotlin.collections/List<#A>, kotlinx.collections.immutable/ImmutableCollection<#A> { // kotlinx.collections.immutable/ImmutableList|null[0]
    open fun subList(kotlin/Int, kotlin/Int): kotlinx.collections.immutable/ImmutableList<#A> // kotlinx.collections.immutable/ImmutableList.subList|subList(kotlin.Int;kotlin.Int){}[0]
}

abstract interface <#A: out kotlin/Any?> kotlinx.collections.immutable/ImmutableSet : kotlin.collections/Set<#A>, kotlinx.collections.immutable/ImmutableCollection<#A> // kotlinx.collections.immutable/ImmutableSet|null[0]

abstract interface <#A: out kotlin/Any?> kotlinx.collections.immutable/PersistentCollection : kotlinx.collections.immutable/ImmutableCollection<#A> { // kotlinx.collections.immutable/PersistentCollection|null[0]
    abstract fun add(#A): kotlinx.collections.immutable/PersistentCollection<#A> // kotlinx.collections.immutable/PersistentCollection.add|add(1:0){}[0]
    abstract fun addAll(kotlin.collections/Collection<#A>): kotlinx.collections.immutable/PersistentCollection<#A> // kotlinx.collections.immutable/PersistentCollection.addAll|addAll(kotlin.collections.Collection<1:0>){}[0]
    abstract fun builder(): kotlinx.collections.immutable/PersistentCollection.Builder<#A> // kotlinx.collections.immutable/PersistentCollection.builder|builder(){}[0]
    abstract fun clear(): kotlinx.collections.immutable/PersistentCollection<#A> // kotlinx.collections.immutable/PersistentCollection.clear|clear(){}[0]
    abstract fun remove(#A): kotlinx.collections.immutable/PersistentCollection<#A> // kotlinx.collections.immutable/PersistentCollection.remove|remove(1:0){}[0]
    abstract fun removeAll(kotlin.collections/Collection<#A>): kotlinx.collections.immutable/PersistentCollection<#A> // kotlinx.collections.immutable/PersistentCollection.removeAll|removeAll(kotlin.collections.Collection<1:0>){}[0]
    abstract fun removeAll(kotlin/Function1<#A, kotlin/Boolean>): kotlinx.collections.immutable/PersistentCollection<#A> // kotlinx.collections.immutable/PersistentCollection.removeAll|removeAll(kotlin.Function1<1:0,kotlin.Boolean>){}[0]
    abstract fun retainAll(kotlin.collections/Collection<#A>): kotlinx.collections.immutable/PersistentCollection<#A> // kotlinx.collections.immutable/PersistentCollection.retainAll|retainAll(kotlin.collections.Collection<1:0>){}[0]

    abstract interface <#A1: kotlin/Any?> Builder : kotlin.collections/MutableCollection<#A1> { // kotlinx.collections.immutable/PersistentCollection.Builder|null[0]
        abstract fun build(): kotlinx.collections.immutable/PersistentCollection<#A1> // kotlinx.collections.immutable/PersistentCollection.Builder.build|build(){}[0]
    }
}

abstract interface <#A: out kotlin/Any?> kotlinx.collections.immutable/PersistentList : kotlinx.collections.immutable/ImmutableList<#A>, kotlinx.collections.immutable/PersistentCollection<#A> { // kotlinx.collections.immutable/PersistentList|null[0]
    abstract fun add(#A): kotlinx.collections.immutable/PersistentList<#A> // kotlinx.collections.immutable/PersistentList.add|add(1:0){}[0]
    abstract fun add(kotlin/Int, #A): kotlinx.collections.immutable/PersistentList<#A> // kotlinx.collections.immutable/PersistentList.add|add(kotlin.Int;1:0){}[0]
    abstract fun addAll(kotlin.collections/Collection<#A>): kotlinx.collections.immutable/PersistentList<#A> // kotlinx.collections.immutable/PersistentList.addAll|addAll(kotlin.collections.Collection<1:0>){}[0]
    abstract fun addAll(kotlin/Int, kotlin.collections/Collection<#A>): kotlinx.collections.immutable/PersistentList<#A> // kotlinx.collections.immutable/PersistentList.addAll|addAll(kotlin.Int;kotlin.collections.Collection<1:0>){}[0]
    abstract fun builder(): kotlinx.collections.immutable/PersistentList.Builder<#A> // kotlinx.collections.immutable/PersistentList.builder|builder(){}[0]
    abstract fun clear(): kotlinx.collections.immutable/PersistentList<#A> // kotlinx.collections.immutable/PersistentList.clear|clear(){}[0]
    abstract fun remove(#A): kotlinx.collections.immutable/PersistentList<#A> // kotlinx.collections.immutable/PersistentList.remove|remove(1:0){}[0]
    abstract fun removeAll(kotlin.collections/Collection<#A>): kotlinx.collections.immutable/PersistentList<#A> // kotlinx.collections.immutable/PersistentList.removeAll|removeAll(kotlin.collections.Collection<1:0>){}[0]
    abstract fun removeAll(kotlin/Function1<#A, kotlin/Boolean>): kotlinx.collections.immutable/PersistentList<#A> // kotlinx.collections.immutable/PersistentList.removeAll|removeAll(kotlin.Function1<1:0,kotlin.Boolean>){}[0]
    abstract fun removeAt(kotlin/Int): kotlinx.collections.immutable/PersistentList<#A> // kotlinx.collections.immutable/PersistentList.removeAt|removeAt(kotlin.Int){}[0]
    abstract fun retainAll(kotlin.collections/Collection<#A>): kotlinx.collections.immutable/PersistentList<#A> // kotlinx.collections.immutable/PersistentList.retainAll|retainAll(kotlin.collections.Collection<1:0>){}[0]
    abstract fun set(kotlin/Int, #A): kotlinx.collections.immutable/PersistentList<#A> // kotlinx.collections.immutable/PersistentList.set|set(kotlin.Int;1:0){}[0]

    abstract interface <#A1: kotlin/Any?> Builder : kotlin.collections/MutableList<#A1>, kotlinx.collections.immutable/PersistentCollection.Builder<#A1> { // kotlinx.collections.immutable/PersistentList.Builder|null[0]
        abstract fun build(): kotlinx.collections.immutable/PersistentList<#A1> // kotlinx.collections.immutable/PersistentList.Builder.build|build(){}[0]
    }
}

abstract interface <#A: out kotlin/Any?> kotlinx.collections.immutable/PersistentSet : kotlinx.collections.immutable/ImmutableSet<#A>, kotlinx.collections.immutable/PersistentCollection<#A> { // kotlinx.collections.immutable/PersistentSet|null[0]
    abstract fun add(#A): kotlinx.collections.immutable/PersistentSet<#A> // kotlinx.collections.immutable/PersistentSet.add|add(1:0){}[0]
    abstract fun addAll(kotlin.collections/Collection<#A>): kotlinx.collections.immutable/PersistentSet<#A> // kotlinx.collections.immutable/PersistentSet.addAll|addAll(kotlin.collections.Collection<1:0>){}[0]
    abstract fun builder(): kotlinx.collections.immutable/PersistentSet.Builder<#A> // kotlinx.collections.immutable/PersistentSet.builder|builder(){}[0]
    abstract fun clear(): kotlinx.collections.immutable/PersistentSet<#A> // kotlinx.collections.immutable/PersistentSet.clear|clear(){}[0]
    abstract fun remove(#A): kotlinx.collections.immutable/PersistentSet<#A> // kotlinx.collections.immutable/PersistentSet.remove|remove(1:0){}[0]
    abstract fun removeAll(kotlin.collections/Collection<#A>): kotlinx.collections.immutable/PersistentSet<#A> // kotlinx.collections.immutable/PersistentSet.removeAll|removeAll(kotlin.collections.Collection<1:0>){}[0]
    abstract fun removeAll(kotlin/Function1<#A, kotlin/Boolean>): kotlinx.collections.immutable/PersistentSet<#A> // kotlinx.collections.immutable/PersistentSet.removeAll|removeAll(kotlin.Function1<1:0,kotlin.Boolean>){}[0]
    abstract fun retainAll(kotlin.collections/Collection<#A>): kotlinx.collections.immutable/PersistentSet<#A> // kotlinx.collections.immutable/PersistentSet.retainAll|retainAll(kotlin.collections.Collection<1:0>){}[0]

    abstract interface <#A1: kotlin/Any?> Builder : kotlin.collections/MutableSet<#A1>, kotlinx.collections.immutable/PersistentCollection.Builder<#A1> { // kotlinx.collections.immutable/PersistentSet.Builder|null[0]
        abstract fun build(): kotlinx.collections.immutable/PersistentSet<#A1> // kotlinx.collections.immutable/PersistentSet.Builder.build|build(){}[0]
    }
}

abstract class <#A: kotlin/Any?> kotlinx.collections.immutable.implementations.immutableList/AbstractPersistentList : kotlin.collections/AbstractList<#A>, kotlinx.collections.immutable/PersistentList<#A> { // kotlinx.collections.immutable.implementations.immutableList/AbstractPersistentList|null[0]
    constructor <init>() // kotlinx.collections.immutable.implementations.immutableList/AbstractPersistentList.<init>|<init>(){}[0]

    open fun addAll(kotlin.collections/Collection<#A>): kotlinx.collections.immutable/PersistentList<#A> // kotlinx.collections.immutable.implementations.immutableList/AbstractPersistentList.addAll|addAll(kotlin.collections.Collection<1:0>){}[0]
    open fun addAll(kotlin/Int, kotlin.collections/Collection<#A>): kotlinx.collections.immutable/PersistentList<#A> // kotlinx.collections.immutable.implementations.immutableList/AbstractPersistentList.addAll|addAll(kotlin.Int;kotlin.collections.Collection<1:0>){}[0]
    open fun clear(): kotlinx.collections.immutable/PersistentList<#A> // kotlinx.collections.immutable.implementations.immutableList/AbstractPersistentList.clear|clear(){}[0]
    open fun contains(#A): kotlin/Boolean // kotlinx.collections.immutable.implementations.immutableList/AbstractPersistentList.contains|contains(1:0){}[0]
    open fun containsAll(kotlin.collections/Collection<#A>): kotlin/Boolean // kotlinx.collections.immutable.implementations.immutableList/AbstractPersistentList.containsAll|containsAll(kotlin.collections.Collection<1:0>){}[0]
    open fun iterator(): kotlin.collections/Iterator<#A> // kotlinx.collections.immutable.implementations.immutableList/AbstractPersistentList.iterator|iterator(){}[0]
    open fun listIterator(): kotlin.collections/ListIterator<#A> // kotlinx.collections.immutable.implementations.immutableList/AbstractPersistentList.listIterator|listIterator(){}[0]
    open fun remove(#A): kotlinx.collections.immutable/PersistentList<#A> // kotlinx.collections.immutable.implementations.immutableList/AbstractPersistentList.remove|remove(1:0){}[0]
    open fun removeAll(kotlin.collections/Collection<#A>): kotlinx.collections.immutable/PersistentList<#A> // kotlinx.collections.immutable.implementations.immutableList/AbstractPersistentList.removeAll|removeAll(kotlin.collections.Collection<1:0>){}[0]
    open fun retainAll(kotlin.collections/Collection<#A>): kotlinx.collections.immutable/PersistentList<#A> // kotlinx.collections.immutable.implementations.immutableList/AbstractPersistentList.retainAll|retainAll(kotlin.collections.Collection<1:0>){}[0]
    open fun subList(kotlin/Int, kotlin/Int): kotlinx.collections.immutable/ImmutableList<#A> // kotlinx.collections.immutable.implementations.immutableList/AbstractPersistentList.subList|subList(kotlin.Int;kotlin.Int){}[0]
}

final class <#A: kotlin/Any?, #B: out kotlin/Any?> kotlinx.collections.immutable.adapters/ImmutableMapAdapter : kotlin.collections/Map<#A, #B>, kotlinx.collections.immutable/ImmutableMap<#A, #B> { // kotlinx.collections.immutable.adapters/ImmutableMapAdapter|null[0]
    constructor <init>(kotlin.collections/Map<#A, #B>) // kotlinx.collections.immutable.adapters/ImmutableMapAdapter.<init>|<init>(kotlin.collections.Map<1:0,1:1>){}[0]

    final val entries // kotlinx.collections.immutable.adapters/ImmutableMapAdapter.entries|{}entries[0]
        final fun <get-entries>(): kotlinx.collections.immutable/ImmutableSet<kotlin.collections/Map.Entry<#A, #B>> // kotlinx.collections.immutable.adapters/ImmutableMapAdapter.entries.<get-entries>|<get-entries>(){}[0]
    final val keys // kotlinx.collections.immutable.adapters/ImmutableMapAdapter.keys|{}keys[0]
        final fun <get-keys>(): kotlinx.collections.immutable/ImmutableSet<#A> // kotlinx.collections.immutable.adapters/ImmutableMapAdapter.keys.<get-keys>|<get-keys>(){}[0]
    final val size // kotlinx.collections.immutable.adapters/ImmutableMapAdapter.size|{}size[0]
        final fun <get-size>(): kotlin/Int // kotlinx.collections.immutable.adapters/ImmutableMapAdapter.size.<get-size>|<get-size>(){}[0]
    final val values // kotlinx.collections.immutable.adapters/ImmutableMapAdapter.values|{}values[0]
        final fun <get-values>(): kotlinx.collections.immutable/ImmutableCollection<#B> // kotlinx.collections.immutable.adapters/ImmutableMapAdapter.values.<get-values>|<get-values>(){}[0]

    final fun containsKey(#A): kotlin/Boolean // kotlinx.collections.immutable.adapters/ImmutableMapAdapter.containsKey|containsKey(1:0){}[0]
    final fun containsValue(#B): kotlin/Boolean // kotlinx.collections.immutable.adapters/ImmutableMapAdapter.containsValue|containsValue(1:1){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // kotlinx.collections.immutable.adapters/ImmutableMapAdapter.equals|equals(kotlin.Any?){}[0]
    final fun get(#A): #B? // kotlinx.collections.immutable.adapters/ImmutableMapAdapter.get|get(1:0){}[0]
    final fun hashCode(): kotlin/Int // kotlinx.collections.immutable.adapters/ImmutableMapAdapter.hashCode|hashCode(){}[0]
    final fun isEmpty(): kotlin/Boolean // kotlinx.collections.immutable.adapters/ImmutableMapAdapter.isEmpty|isEmpty(){}[0]
    final fun toString(): kotlin/String // kotlinx.collections.immutable.adapters/ImmutableMapAdapter.toString|toString(){}[0]

    // Targets: [js]
    final fun asJsReadonlyMapView(): kotlin.js.collections/JsReadonlyMap<#A, #B> // kotlinx.collections.immutable.adapters/ImmutableMapAdapter.asJsReadonlyMapView|asJsReadonlyMapView(){}[0]
}

final class <#A: kotlin/Any?> kotlinx.collections.immutable.adapters/ImmutableListAdapter : kotlin.collections/List<#A>, kotlinx.collections.immutable/ImmutableList<#A> { // kotlinx.collections.immutable.adapters/ImmutableListAdapter|null[0]
    constructor <init>(kotlin.collections/List<#A>) // kotlinx.collections.immutable.adapters/ImmutableListAdapter.<init>|<init>(kotlin.collections.List<1:0>){}[0]

    final val size // kotlinx.collections.immutable.adapters/ImmutableListAdapter.size|{}size[0]
        final fun <get-size>(): kotlin/Int // kotlinx.collections.immutable.adapters/ImmutableListAdapter.size.<get-size>|<get-size>(){}[0]

    final fun contains(#A): kotlin/Boolean // kotlinx.collections.immutable.adapters/ImmutableListAdapter.contains|contains(1:0){}[0]
    final fun containsAll(kotlin.collections/Collection<#A>): kotlin/Boolean // kotlinx.collections.immutable.adapters/ImmutableListAdapter.containsAll|containsAll(kotlin.collections.Collection<1:0>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // kotlinx.collections.immutable.adapters/ImmutableListAdapter.equals|equals(kotlin.Any?){}[0]
    final fun get(kotlin/Int): #A // kotlinx.collections.immutable.adapters/ImmutableListAdapter.get|get(kotlin.Int){}[0]
    final fun hashCode(): kotlin/Int // kotlinx.collections.immutable.adapters/ImmutableListAdapter.hashCode|hashCode(){}[0]
    final fun indexOf(#A): kotlin/Int // kotlinx.collections.immutable.adapters/ImmutableListAdapter.indexOf|indexOf(1:0){}[0]
    final fun isEmpty(): kotlin/Boolean // kotlinx.collections.immutable.adapters/ImmutableListAdapter.isEmpty|isEmpty(){}[0]
    final fun iterator(): kotlin.collections/Iterator<#A> // kotlinx.collections.immutable.adapters/ImmutableListAdapter.iterator|iterator(){}[0]
    final fun lastIndexOf(#A): kotlin/Int // kotlinx.collections.immutable.adapters/ImmutableListAdapter.lastIndexOf|lastIndexOf(1:0){}[0]
    final fun listIterator(): kotlin.collections/ListIterator<#A> // kotlinx.collections.immutable.adapters/ImmutableListAdapter.listIterator|listIterator(){}[0]
    final fun listIterator(kotlin/Int): kotlin.collections/ListIterator<#A> // kotlinx.collections.immutable.adapters/ImmutableListAdapter.listIterator|listIterator(kotlin.Int){}[0]
    final fun subList(kotlin/Int, kotlin/Int): kotlinx.collections.immutable/ImmutableList<#A> // kotlinx.collections.immutable.adapters/ImmutableListAdapter.subList|subList(kotlin.Int;kotlin.Int){}[0]
    final fun toString(): kotlin/String // kotlinx.collections.immutable.adapters/ImmutableListAdapter.toString|toString(){}[0]

    // Targets: [js]
    final fun asJsReadonlyArrayView(): kotlin.js.collections/JsReadonlyArray<#A> // kotlinx.collections.immutable.adapters/ImmutableListAdapter.asJsReadonlyArrayView|asJsReadonlyArrayView(){}[0]
}

final class <#A: kotlin/Any?> kotlinx.collections.immutable.adapters/ImmutableSetAdapter : kotlinx.collections.immutable.adapters/ImmutableCollectionAdapter<#A>, kotlinx.collections.immutable/ImmutableSet<#A> { // kotlinx.collections.immutable.adapters/ImmutableSetAdapter|null[0]
    constructor <init>(kotlin.collections/Set<#A>) // kotlinx.collections.immutable.adapters/ImmutableSetAdapter.<init>|<init>(kotlin.collections.Set<1:0>){}[0]
}

open class <#A: kotlin/Any?> kotlinx.collections.immutable.adapters/ImmutableCollectionAdapter : kotlin.collections/Collection<#A>, kotlinx.collections.immutable/ImmutableCollection<#A> { // kotlinx.collections.immutable.adapters/ImmutableCollectionAdapter|null[0]
    constructor <init>(kotlin.collections/Collection<#A>) // kotlinx.collections.immutable.adapters/ImmutableCollectionAdapter.<init>|<init>(kotlin.collections.Collection<1:0>){}[0]

    open val size // kotlinx.collections.immutable.adapters/ImmutableCollectionAdapter.size|{}size[0]
        open fun <get-size>(): kotlin/Int // kotlinx.collections.immutable.adapters/ImmutableCollectionAdapter.size.<get-size>|<get-size>(){}[0]

    open fun contains(#A): kotlin/Boolean // kotlinx.collections.immutable.adapters/ImmutableCollectionAdapter.contains|contains(1:0){}[0]
    open fun containsAll(kotlin.collections/Collection<#A>): kotlin/Boolean // kotlinx.collections.immutable.adapters/ImmutableCollectionAdapter.containsAll|containsAll(kotlin.collections.Collection<1:0>){}[0]
    open fun equals(kotlin/Any?): kotlin/Boolean // kotlinx.collections.immutable.adapters/ImmutableCollectionAdapter.equals|equals(kotlin.Any?){}[0]
    open fun hashCode(): kotlin/Int // kotlinx.collections.immutable.adapters/ImmutableCollectionAdapter.hashCode|hashCode(){}[0]
    open fun isEmpty(): kotlin/Boolean // kotlinx.collections.immutable.adapters/ImmutableCollectionAdapter.isEmpty|isEmpty(){}[0]
    open fun iterator(): kotlin.collections/Iterator<#A> // kotlinx.collections.immutable.adapters/ImmutableCollectionAdapter.iterator|iterator(){}[0]
    open fun toString(): kotlin/String // kotlinx.collections.immutable.adapters/ImmutableCollectionAdapter.toString|toString(){}[0]
}

final fun (kotlin/CharSequence).kotlinx.collections.immutable/toImmutableList(): kotlinx.collections.immutable/ImmutableList<kotlin/Char> // kotlinx.collections.immutable/toImmutableList|toImmutableList@kotlin.CharSequence(){}[0]
final fun (kotlin/CharSequence).kotlinx.collections.immutable/toImmutableSet(): kotlinx.collections.immutable/PersistentSet<kotlin/Char> // kotlinx.collections.immutable/toImmutableSet|toImmutableSet@kotlin.CharSequence(){}[0]
final fun (kotlin/CharSequence).kotlinx.collections.immutable/toPersistentHashSet(): kotlinx.collections.immutable/PersistentSet<kotlin/Char> // kotlinx.collections.immutable/toPersistentHashSet|toPersistentHashSet@kotlin.CharSequence(){}[0]
final fun (kotlin/CharSequence).kotlinx.collections.immutable/toPersistentList(): kotlinx.collections.immutable/PersistentList<kotlin/Char> // kotlinx.collections.immutable/toPersistentList|toPersistentList@kotlin.CharSequence(){}[0]
final fun (kotlin/CharSequence).kotlinx.collections.immutable/toPersistentSet(): kotlinx.collections.immutable/PersistentSet<kotlin/Char> // kotlinx.collections.immutable/toPersistentSet|toPersistentSet@kotlin.CharSequence(){}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<#A, #B>).kotlinx.collections.immutable/toImmutableMap(): kotlinx.collections.immutable/ImmutableMap<#A, #B> // kotlinx.collections.immutable/toImmutableMap|toImmutableMap@kotlin.collections.Map<0:0,0:1>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<#A, #B>).kotlinx.collections.immutable/toPersistentHashMap(): kotlinx.collections.immutable/PersistentMap<#A, #B> // kotlinx.collections.immutable/toPersistentHashMap|toPersistentHashMap@kotlin.collections.Map<0:0,0:1>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<#A, #B>).kotlinx.collections.immutable/toPersistentMap(): kotlinx.collections.immutable/PersistentMap<#A, #B> // kotlinx.collections.immutable/toPersistentMap|toPersistentMap@kotlin.collections.Map<0:0,0:1>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlinx.collections.immutable/PersistentMap<out #A, #B>).kotlinx.collections.immutable/minus(#A): kotlinx.collections.immutable/PersistentMap<#A, #B> // kotlinx.collections.immutable/minus|minus@kotlinx.collections.immutable.PersistentMap<out|0:0,0:1>(0:0){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlinx.collections.immutable/PersistentMap<out #A, #B>).kotlinx.collections.immutable/minus(kotlin.collections/Iterable<#A>): kotlinx.collections.immutable/PersistentMap<#A, #B> // kotlinx.collections.immutable/minus|minus@kotlinx.collections.immutable.PersistentMap<out|0:0,0:1>(kotlin.collections.Iterable<0:0>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlinx.collections.immutable/PersistentMap<out #A, #B>).kotlinx.collections.immutable/minus(kotlin.sequences/Sequence<#A>): kotlinx.collections.immutable/PersistentMap<#A, #B> // kotlinx.collections.immutable/minus|minus@kotlinx.collections.immutable.PersistentMap<out|0:0,0:1>(kotlin.sequences.Sequence<0:0>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlinx.collections.immutable/PersistentMap<out #A, #B>).kotlinx.collections.immutable/minus(kotlin/Array<out #A>): kotlinx.collections.immutable/PersistentMap<#A, #B> // kotlinx.collections.immutable/minus|minus@kotlinx.collections.immutable.PersistentMap<out|0:0,0:1>(kotlin.Array<out|0:0>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlinx.collections.immutable/PersistentMap<out #A, #B>).kotlinx.collections.immutable/putAll(kotlin.collections/Iterable<kotlin/Pair<#A, #B>>): kotlinx.collections.immutable/PersistentMap<#A, #B> // kotlinx.collections.immutable/putAll|putAll@kotlinx.collections.immutable.PersistentMap<out|0:0,0:1>(kotlin.collections.Iterable<kotlin.Pair<0:0,0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlinx.collections.immutable/PersistentMap<out #A, #B>).kotlinx.collections.immutable/putAll(kotlin.collections/Map<out #A, #B>): kotlinx.collections.immutable/PersistentMap<#A, #B> // kotlinx.collections.immutable/putAll|putAll@kotlinx.collections.immutable.PersistentMap<out|0:0,0:1>(kotlin.collections.Map<out|0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlinx.collections.immutable/PersistentMap<out #A, #B>).kotlinx.collections.immutable/putAll(kotlin.sequences/Sequence<kotlin/Pair<#A, #B>>): kotlinx.collections.immutable/PersistentMap<#A, #B> // kotlinx.collections.immutable/putAll|putAll@kotlinx.collections.immutable.PersistentMap<out|0:0,0:1>(kotlin.sequences.Sequence<kotlin.Pair<0:0,0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlinx.collections.immutable/PersistentMap<out #A, #B>).kotlinx.collections.immutable/putAll(kotlin/Array<out kotlin/Pair<#A, #B>>): kotlinx.collections.immutable/PersistentMap<#A, #B> // kotlinx.collections.immutable/putAll|putAll@kotlinx.collections.immutable.PersistentMap<out|0:0,0:1>(kotlin.Array<out|kotlin.Pair<0:0,0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> kotlinx.collections.immutable/immutableHashMapOf(kotlin/Array<out kotlin/Pair<#A, #B>>...): kotlinx.collections.immutable/PersistentMap<#A, #B> // kotlinx.collections.immutable/immutableHashMapOf|immutableHashMapOf(kotlin.Array<out|kotlin.Pair<0:0,0:1>>...){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> kotlinx.collections.immutable/immutableMapOf(kotlin/Array<out kotlin/Pair<#A, #B>>...): kotlinx.collections.immutable/PersistentMap<#A, #B> // kotlinx.collections.immutable/immutableMapOf|immutableMapOf(kotlin.Array<out|kotlin.Pair<0:0,0:1>>...){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> kotlinx.collections.immutable/persistentHashMapOf(): kotlinx.collections.immutable/PersistentMap<#A, #B> // kotlinx.collections.immutable/persistentHashMapOf|persistentHashMapOf(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> kotlinx.collections.immutable/persistentHashMapOf(kotlin/Array<out kotlin/Pair<#A, #B>>...): kotlinx.collections.immutable/PersistentMap<#A, #B> // kotlinx.collections.immutable/persistentHashMapOf|persistentHashMapOf(kotlin.Array<out|kotlin.Pair<0:0,0:1>>...){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> kotlinx.collections.immutable/persistentMapOf(): kotlinx.collections.immutable/PersistentMap<#A, #B> // kotlinx.collections.immutable/persistentMapOf|persistentMapOf(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> kotlinx.collections.immutable/persistentMapOf(kotlin/Array<out kotlin/Pair<#A, #B>>...): kotlinx.collections.immutable/PersistentMap<#A, #B> // kotlinx.collections.immutable/persistentMapOf|persistentMapOf(kotlin.Array<out|kotlin.Pair<0:0,0:1>>...){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlinx.collections.immutable/toImmutableList(): kotlinx.collections.immutable/ImmutableList<#A> // kotlinx.collections.immutable/toImmutableList|toImmutableList@kotlin.collections.Iterable<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlinx.collections.immutable/toImmutableSet(): kotlinx.collections.immutable/ImmutableSet<#A> // kotlinx.collections.immutable/toImmutableSet|toImmutableSet@kotlin.collections.Iterable<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlinx.collections.immutable/toPersistentHashSet(): kotlinx.collections.immutable/PersistentSet<#A> // kotlinx.collections.immutable/toPersistentHashSet|toPersistentHashSet@kotlin.collections.Iterable<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlinx.collections.immutable/toPersistentList(): kotlinx.collections.immutable/PersistentList<#A> // kotlinx.collections.immutable/toPersistentList|toPersistentList@kotlin.collections.Iterable<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).kotlinx.collections.immutable/toPersistentSet(): kotlinx.collections.immutable/PersistentSet<#A> // kotlinx.collections.immutable/toPersistentSet|toPersistentSet@kotlin.collections.Iterable<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlinx.collections.immutable/toImmutableList(): kotlinx.collections.immutable/ImmutableList<#A> // kotlinx.collections.immutable/toImmutableList|toImmutableList@kotlin.sequences.Sequence<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlinx.collections.immutable/toImmutableSet(): kotlinx.collections.immutable/ImmutableSet<#A> // kotlinx.collections.immutable/toImmutableSet|toImmutableSet@kotlin.sequences.Sequence<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlinx.collections.immutable/toPersistentHashSet(): kotlinx.collections.immutable/PersistentSet<#A> // kotlinx.collections.immutable/toPersistentHashSet|toPersistentHashSet@kotlin.sequences.Sequence<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlinx.collections.immutable/toPersistentList(): kotlinx.collections.immutable/PersistentList<#A> // kotlinx.collections.immutable/toPersistentList|toPersistentList@kotlin.sequences.Sequence<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).kotlinx.collections.immutable/toPersistentSet(): kotlinx.collections.immutable/PersistentSet<#A> // kotlinx.collections.immutable/toPersistentSet|toPersistentSet@kotlin.sequences.Sequence<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlinx.collections.immutable/toImmutableList(): kotlinx.collections.immutable/ImmutableList<#A> // kotlinx.collections.immutable/toImmutableList|toImmutableList@kotlin.Array<out|0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlinx.collections.immutable/toImmutableSet(): kotlinx.collections.immutable/ImmutableSet<#A> // kotlinx.collections.immutable/toImmutableSet|toImmutableSet@kotlin.Array<out|0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlinx.collections.immutable/toPersistentHashSet(): kotlinx.collections.immutable/PersistentSet<#A> // kotlinx.collections.immutable/toPersistentHashSet|toPersistentHashSet@kotlin.Array<out|0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlinx.collections.immutable/toPersistentList(): kotlinx.collections.immutable/PersistentList<#A> // kotlinx.collections.immutable/toPersistentList|toPersistentList@kotlin.Array<out|0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Array<out #A>).kotlinx.collections.immutable/toPersistentSet(): kotlinx.collections.immutable/PersistentSet<#A> // kotlinx.collections.immutable/toPersistentSet|toPersistentSet@kotlin.Array<out|0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlinx.collections.immutable/PersistentCollection<#A>).kotlinx.collections.immutable/intersect(kotlin.collections/Iterable<#A>): kotlinx.collections.immutable/PersistentSet<#A> // kotlinx.collections.immutable/intersect|intersect@kotlinx.collections.immutable.PersistentCollection<0:0>(kotlin.collections.Iterable<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlinx.collections.immutable/PersistentCollection<#A>).kotlinx.collections.immutable/minus(kotlin.collections/Iterable<#A>): kotlinx.collections.immutable/PersistentCollection<#A> // kotlinx.collections.immutable/minus|minus@kotlinx.collections.immutable.PersistentCollection<0:0>(kotlin.collections.Iterable<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlinx.collections.immutable/PersistentCollection<#A>).kotlinx.collections.immutable/minus(kotlin.sequences/Sequence<#A>): kotlinx.collections.immutable/PersistentCollection<#A> // kotlinx.collections.immutable/minus|minus@kotlinx.collections.immutable.PersistentCollection<0:0>(kotlin.sequences.Sequence<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlinx.collections.immutable/PersistentCollection<#A>).kotlinx.collections.immutable/minus(kotlin/Array<out #A>): kotlinx.collections.immutable/PersistentCollection<#A> // kotlinx.collections.immutable/minus|minus@kotlinx.collections.immutable.PersistentCollection<0:0>(kotlin.Array<out|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlinx.collections.immutable/PersistentCollection<#A>).kotlinx.collections.immutable/plus(kotlin.collections/Iterable<#A>): kotlinx.collections.immutable/PersistentCollection<#A> // kotlinx.collections.immutable/plus|plus@kotlinx.collections.immutable.PersistentCollection<0:0>(kotlin.collections.Iterable<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlinx.collections.immutable/PersistentCollection<#A>).kotlinx.collections.immutable/plus(kotlin.sequences/Sequence<#A>): kotlinx.collections.immutable/PersistentCollection<#A> // kotlinx.collections.immutable/plus|plus@kotlinx.collections.immutable.PersistentCollection<0:0>(kotlin.sequences.Sequence<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlinx.collections.immutable/PersistentCollection<#A>).kotlinx.collections.immutable/plus(kotlin/Array<out #A>): kotlinx.collections.immutable/PersistentCollection<#A> // kotlinx.collections.immutable/plus|plus@kotlinx.collections.immutable.PersistentCollection<0:0>(kotlin.Array<out|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlinx.collections.immutable/PersistentList<#A>).kotlinx.collections.immutable/minus(kotlin.collections/Iterable<#A>): kotlinx.collections.immutable/PersistentList<#A> // kotlinx.collections.immutable/minus|minus@kotlinx.collections.immutable.PersistentList<0:0>(kotlin.collections.Iterable<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlinx.collections.immutable/PersistentList<#A>).kotlinx.collections.immutable/minus(kotlin.sequences/Sequence<#A>): kotlinx.collections.immutable/PersistentList<#A> // kotlinx.collections.immutable/minus|minus@kotlinx.collections.immutable.PersistentList<0:0>(kotlin.sequences.Sequence<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlinx.collections.immutable/PersistentList<#A>).kotlinx.collections.immutable/minus(kotlin/Array<out #A>): kotlinx.collections.immutable/PersistentList<#A> // kotlinx.collections.immutable/minus|minus@kotlinx.collections.immutable.PersistentList<0:0>(kotlin.Array<out|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlinx.collections.immutable/PersistentList<#A>).kotlinx.collections.immutable/plus(kotlin.collections/Iterable<#A>): kotlinx.collections.immutable/PersistentList<#A> // kotlinx.collections.immutable/plus|plus@kotlinx.collections.immutable.PersistentList<0:0>(kotlin.collections.Iterable<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlinx.collections.immutable/PersistentList<#A>).kotlinx.collections.immutable/plus(kotlin.sequences/Sequence<#A>): kotlinx.collections.immutable/PersistentList<#A> // kotlinx.collections.immutable/plus|plus@kotlinx.collections.immutable.PersistentList<0:0>(kotlin.sequences.Sequence<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlinx.collections.immutable/PersistentList<#A>).kotlinx.collections.immutable/plus(kotlin/Array<out #A>): kotlinx.collections.immutable/PersistentList<#A> // kotlinx.collections.immutable/plus|plus@kotlinx.collections.immutable.PersistentList<0:0>(kotlin.Array<out|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlinx.collections.immutable/PersistentSet<#A>).kotlinx.collections.immutable/intersect(kotlin.collections/Iterable<#A>): kotlinx.collections.immutable/PersistentSet<#A> // kotlinx.collections.immutable/intersect|intersect@kotlinx.collections.immutable.PersistentSet<0:0>(kotlin.collections.Iterable<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlinx.collections.immutable/PersistentSet<#A>).kotlinx.collections.immutable/minus(kotlin.collections/Iterable<#A>): kotlinx.collections.immutable/PersistentSet<#A> // kotlinx.collections.immutable/minus|minus@kotlinx.collections.immutable.PersistentSet<0:0>(kotlin.collections.Iterable<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlinx.collections.immutable/PersistentSet<#A>).kotlinx.collections.immutable/minus(kotlin.sequences/Sequence<#A>): kotlinx.collections.immutable/PersistentSet<#A> // kotlinx.collections.immutable/minus|minus@kotlinx.collections.immutable.PersistentSet<0:0>(kotlin.sequences.Sequence<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlinx.collections.immutable/PersistentSet<#A>).kotlinx.collections.immutable/minus(kotlin/Array<out #A>): kotlinx.collections.immutable/PersistentSet<#A> // kotlinx.collections.immutable/minus|minus@kotlinx.collections.immutable.PersistentSet<0:0>(kotlin.Array<out|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlinx.collections.immutable/PersistentSet<#A>).kotlinx.collections.immutable/plus(kotlin.collections/Iterable<#A>): kotlinx.collections.immutable/PersistentSet<#A> // kotlinx.collections.immutable/plus|plus@kotlinx.collections.immutable.PersistentSet<0:0>(kotlin.collections.Iterable<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlinx.collections.immutable/PersistentSet<#A>).kotlinx.collections.immutable/plus(kotlin.sequences/Sequence<#A>): kotlinx.collections.immutable/PersistentSet<#A> // kotlinx.collections.immutable/plus|plus@kotlinx.collections.immutable.PersistentSet<0:0>(kotlin.sequences.Sequence<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlinx.collections.immutable/PersistentSet<#A>).kotlinx.collections.immutable/plus(kotlin/Array<out #A>): kotlinx.collections.immutable/PersistentSet<#A> // kotlinx.collections.immutable/plus|plus@kotlinx.collections.immutable.PersistentSet<0:0>(kotlin.Array<out|0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> kotlinx.collections.immutable/immutableHashSetOf(kotlin/Array<out #A>...): kotlinx.collections.immutable/PersistentSet<#A> // kotlinx.collections.immutable/immutableHashSetOf|immutableHashSetOf(kotlin.Array<out|0:0>...){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> kotlinx.collections.immutable/immutableListOf(): kotlinx.collections.immutable/PersistentList<#A> // kotlinx.collections.immutable/immutableListOf|immutableListOf(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> kotlinx.collections.immutable/immutableListOf(kotlin/Array<out #A>...): kotlinx.collections.immutable/PersistentList<#A> // kotlinx.collections.immutable/immutableListOf|immutableListOf(kotlin.Array<out|0:0>...){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> kotlinx.collections.immutable/immutableSetOf(): kotlinx.collections.immutable/PersistentSet<#A> // kotlinx.collections.immutable/immutableSetOf|immutableSetOf(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> kotlinx.collections.immutable/immutableSetOf(kotlin/Array<out #A>...): kotlinx.collections.immutable/PersistentSet<#A> // kotlinx.collections.immutable/immutableSetOf|immutableSetOf(kotlin.Array<out|0:0>...){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> kotlinx.collections.immutable/persistentHashSetOf(): kotlinx.collections.immutable/PersistentSet<#A> // kotlinx.collections.immutable/persistentHashSetOf|persistentHashSetOf(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> kotlinx.collections.immutable/persistentHashSetOf(kotlin/Array<out #A>...): kotlinx.collections.immutable/PersistentSet<#A> // kotlinx.collections.immutable/persistentHashSetOf|persistentHashSetOf(kotlin.Array<out|0:0>...){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> kotlinx.collections.immutable/persistentListOf(): kotlinx.collections.immutable/PersistentList<#A> // kotlinx.collections.immutable/persistentListOf|persistentListOf(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> kotlinx.collections.immutable/persistentListOf(kotlin/Array<out #A>...): kotlinx.collections.immutable/PersistentList<#A> // kotlinx.collections.immutable/persistentListOf|persistentListOf(kotlin.Array<out|0:0>...){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> kotlinx.collections.immutable/persistentSetOf(): kotlinx.collections.immutable/PersistentSet<#A> // kotlinx.collections.immutable/persistentSetOf|persistentSetOf(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> kotlinx.collections.immutable/persistentSetOf(kotlin/Array<out #A>...): kotlinx.collections.immutable/PersistentSet<#A> // kotlinx.collections.immutable/persistentSetOf|persistentSetOf(kotlin.Array<out|0:0>...){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlinx.collections.immutable/PersistentMap<out #A, #B>).kotlinx.collections.immutable/mutate(kotlin/Function1<kotlin.collections/MutableMap<#A, #B>, kotlin/Unit>): kotlinx.collections.immutable/PersistentMap<#A, #B> // kotlinx.collections.immutable/mutate|mutate@kotlinx.collections.immutable.PersistentMap<out|0:0,0:1>(kotlin.Function1<kotlin.collections.MutableMap<0:0,0:1>,kotlin.Unit>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlinx.collections.immutable/PersistentMap<out #A, #B>).kotlinx.collections.immutable/plus(kotlin.collections/Iterable<kotlin/Pair<#A, #B>>): kotlinx.collections.immutable/PersistentMap<#A, #B> // kotlinx.collections.immutable/plus|plus@kotlinx.collections.immutable.PersistentMap<out|0:0,0:1>(kotlin.collections.Iterable<kotlin.Pair<0:0,0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlinx.collections.immutable/PersistentMap<out #A, #B>).kotlinx.collections.immutable/plus(kotlin.collections/Map<out #A, #B>): kotlinx.collections.immutable/PersistentMap<#A, #B> // kotlinx.collections.immutable/plus|plus@kotlinx.collections.immutable.PersistentMap<out|0:0,0:1>(kotlin.collections.Map<out|0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlinx.collections.immutable/PersistentMap<out #A, #B>).kotlinx.collections.immutable/plus(kotlin.sequences/Sequence<kotlin/Pair<#A, #B>>): kotlinx.collections.immutable/PersistentMap<#A, #B> // kotlinx.collections.immutable/plus|plus@kotlinx.collections.immutable.PersistentMap<out|0:0,0:1>(kotlin.sequences.Sequence<kotlin.Pair<0:0,0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlinx.collections.immutable/PersistentMap<out #A, #B>).kotlinx.collections.immutable/plus(kotlin/Array<out kotlin/Pair<#A, #B>>): kotlinx.collections.immutable/PersistentMap<#A, #B> // kotlinx.collections.immutable/plus|plus@kotlinx.collections.immutable.PersistentMap<out|0:0,0:1>(kotlin.Array<out|kotlin.Pair<0:0,0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlinx.collections.immutable/PersistentMap<out #A, #B>).kotlinx.collections.immutable/plus(kotlin/Pair<#A, #B>): kotlinx.collections.immutable/PersistentMap<#A, #B> // kotlinx.collections.immutable/plus|plus@kotlinx.collections.immutable.PersistentMap<out|0:0,0:1>(kotlin.Pair<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlinx.collections.immutable/PersistentCollection<#A>).kotlinx.collections.immutable/minus(#A): kotlinx.collections.immutable/PersistentCollection<#A> // kotlinx.collections.immutable/minus|minus@kotlinx.collections.immutable.PersistentCollection<0:0>(0:0){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlinx.collections.immutable/PersistentCollection<#A>).kotlinx.collections.immutable/plus(#A): kotlinx.collections.immutable/PersistentCollection<#A> // kotlinx.collections.immutable/plus|plus@kotlinx.collections.immutable.PersistentCollection<0:0>(0:0){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlinx.collections.immutable/PersistentList<#A>).kotlinx.collections.immutable/minus(#A): kotlinx.collections.immutable/PersistentList<#A> // kotlinx.collections.immutable/minus|minus@kotlinx.collections.immutable.PersistentList<0:0>(0:0){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlinx.collections.immutable/PersistentList<#A>).kotlinx.collections.immutable/mutate(kotlin/Function1<kotlin.collections/MutableList<#A>, kotlin/Unit>): kotlinx.collections.immutable/PersistentList<#A> // kotlinx.collections.immutable/mutate|mutate@kotlinx.collections.immutable.PersistentList<0:0>(kotlin.Function1<kotlin.collections.MutableList<0:0>,kotlin.Unit>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlinx.collections.immutable/PersistentList<#A>).kotlinx.collections.immutable/plus(#A): kotlinx.collections.immutable/PersistentList<#A> // kotlinx.collections.immutable/plus|plus@kotlinx.collections.immutable.PersistentList<0:0>(0:0){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlinx.collections.immutable/PersistentSet<#A>).kotlinx.collections.immutable/minus(#A): kotlinx.collections.immutable/PersistentSet<#A> // kotlinx.collections.immutable/minus|minus@kotlinx.collections.immutable.PersistentSet<0:0>(0:0){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlinx.collections.immutable/PersistentSet<#A>).kotlinx.collections.immutable/mutate(kotlin/Function1<kotlin.collections/MutableSet<#A>, kotlin/Unit>): kotlinx.collections.immutable/PersistentSet<#A> // kotlinx.collections.immutable/mutate|mutate@kotlinx.collections.immutable.PersistentSet<0:0>(kotlin.Function1<kotlin.collections.MutableSet<0:0>,kotlin.Unit>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlinx.collections.immutable/PersistentSet<#A>).kotlinx.collections.immutable/plus(#A): kotlinx.collections.immutable/PersistentSet<#A> // kotlinx.collections.immutable/plus|plus@kotlinx.collections.immutable.PersistentSet<0:0>(0:0){0§<kotlin.Any?>}[0]
